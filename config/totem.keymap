//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
              &kp Q        &kp W        &kp E           &kp R         &kp T        &kp Y      &kp U            &kp I         &kp O        &kp P
              &hrm LGUI A  &hrm LALT S  &hrm LCTRL D    &hrm LSHFT F  &kp G        &kp H      &hrm RSHFT J     &hrm RCTRL K  &hrm RALT L  &hrm RGUI SEMICOLON
&lt 0 ESCAPE  &kp Z        &kp X        &kp C           &kp V         &kp B        &kp N      &kp M            &kp COMMA     &kp DOT      &kp FSLH             &kp SQT
                                        &hrm LCTRL DEL  &lt 1 TAB     &kp SPACE    &kp ENTER  &lt 2 BACKSPACE  &kp MINUS
            >;
        };

        NnM {
            label = "NAVI AND MATH";
            bindings = <
              &kp DOT         &trans          &kp UP_ARROW    &trans           &kp LEFT_BRACE          &kp RIGHT_BRACE        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
              &kp LEFT_SHIFT  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&kp LEFT_ALT  &kp LEFT_WIN    &kp MINUS       &trans          &kp PLUS         &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ASTERISK  &kp PLUS
                                              &trans          &trans           &trans                  &trans                 &trans        &kp DOT
            >;
        };

        symb {
            label = "SYMB";
            bindings = <
        &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET       &kp AMPERSAND  &kp ASTERISK  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES
        &trans           &trans       &trans    &trans      &trans         &trans          &trans         &trans        &trans            &trans
&trans  &trans           &trans       &trans    &trans      &trans         &kp UNDERSCORE  &kp EQUAL      &trans        &trans            &trans             &kp HOME
                                      &trans    &trans      &trans         &trans          &trans         &trans
            >;
        };

        func {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp F1
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp F20  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        game {
            bindings = <
         &kp Q  &kp W  &kp E      &kp R     &kp T        &trans  &trans  &trans  &trans  &trans
         &kp A  &kp S  &kp D      &kp F     &trans       &trans  &trans  &trans  &trans  &trans
&kp ESC  &kp Z  &kp X  &kp C      &kp V     &kp B        &trans  &trans  &trans  &trans  &trans  &trans
                       &kp LCTRL  &kp LALT  &kp SPACE    &trans  &trans  &trans
            >;
        };

        game+ {
            bindings = <
         &kp F10  &kp N1  &kp N2  &kp N3  &kp N4    &trans  &trans  &trans  &trans  &trans
         &kp L    &kp O   &kp Y   &kp K   &kp G     &kp F5  &trans  &trans  &trans  &trans
&kp TAB  &sl 0    &trans  &trans  &kp N5  &kp N6    &trans  &trans  &trans  &trans  &trans  &trans
                          &kp J   &kp I   &kp M     &trans  &trans  &trans
            >;
        };
    };
};
